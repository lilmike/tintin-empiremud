#ALIAS {^mod{kill|load|reload} %S$}
{
	CSAVE;
	#nop {reload all modules};
	#if {"%0" == "modreload all"}
	{
		#script {for module in modules/*.tin ; do if [[ "$module" != "modules/msdp.tin" ]];then echo "#class {$(basename "$module" .tin)} {kill};#class {$(basename           "$module" .tin)} {read} {$module}";fi;done};
		#showme {All modules except msdp reloaded.};
		#showme {To reload msdp you must close tintin and relaunch it.}
	};
	#else
	{
		#nop {Kill, load, or reload a specified module.};
		#if {"%2" != "msdp"}
		{
			#if {"%1" == "{kill|reload}"}
			{
				#class {%2} {kill};
				#showme {Class %2 has been killed.}
			};
			#if {"%1" == "{load|reload}"}
			{
				#showme {Loading modules/%2.tin};
				#class {%2} {read} {modules/%2.tin}
			}
		};
		#else
		{
			#showme {Refusing to touch msdp. To reload msdp you must close and reopen tintin.}
		}
	};
	#if {"$MSDP_CHARACTER_NAME" != ""}
	{
		#class {$MSDP_CHARACTER_NAME} {open}
	}
}
{9}

#ALIAS {^{em|login}$}
{
	#if {"$connected" == "false"}
	{
		#session {$mudSessionName} {$mudAddress} {$mudPort}
	};
	#else
	{
		#showme {Huh?}
	}
}
{9}

#EVENT {PROGRAM START}
{
	#nop {Set the home directory variable.};
	#script {HOME} {if [ -z "$XDG_CONFIG_HOME" ] ; then if ! [ -d "$HOME/.config/tintin-empiremud/" ] ; then mkdir -p "$HOME/.config/tintin-empiremud";fi;echo -n "$HOME/.config/tintin-empiremud";else if ! [ -d "$XDG_CONFIG_HOME/tintin-empiremud/" ] ; then mkdir -p "$XDG_CONFIG_HOME/tintin-empiremud/";fi;echo -n "$XDG_CONFIG_HOME/tintin-empiremud";fi};
	#variable {HOME} {${HOME[1]}};
	#nop {Load all the .tin files in the modules directory in classes named after the module name.};
	#script {for i in modules/*.tin ; do echo "#class {$(basename "$i" .tin)} {read} {$i}";done};
	#nop {Get the date as a number, e.g. 1225 is Christmas day. Then PLAY intros based on the date.};
	#script {introDate} {date '+%m%d'};
	#if {${introDate[1]} == 1031}
	{
		PLAY halloween-intro
	};
	#elseif {${introDate[1]} > 1124 && ${introDate[1]} < 1200}
	{
		PLAY thanksgiving-intro
	};
	#elseif {${introDate[1]} >= 1213 && ${introDate[1]} <= 1225}
	{
		PLAY christmas-intro${introDate[1]}
	};
	#else
	{
		PLAY intro
	};
	#nop {This is the only time we need the date number, so may as well clear it.};
	#unvariable {introDate};
	#nop {Get the last modified date of the news file.};
	#script {motd} {curl -sI "$MOTDURL"};
	#regexp {${motd[1]}} {HTTP/1.1 {.*} {.*}} {#variable {motdStatus} {&1}};
	#regexp {${motd[4]}} {Last-Modified: {.*}} {#variable {motdTime} {News updated &1}};
	#nop {DisPLAY intro message.};
	#echo {$mudIntroMessage};
	#nop {This is the only time we need the intro message, so may as well clear it.};
	#unvariable {mudIntroMessage};
	#echo {To get started type login};
	#nop {If everything went ok with the news file above, disPLAY the last time news was updated.};
	#if {$motdStatus == 200}
	{
		#echo {${motdTime}};
		#echo {To listen to it type news.};
		Add_Channel_Event all ${motdTime}
	}
}

#EVENT {SESSION CONNECTED}
{
	SYNTH_PLAY connectedSound;
	#nop {Set connected to true so if you accidently type login it won't try to login twice.};
	#variable {connected} {true};
	#nop {Create the log directory if it doesn't exist. Log files are based on date and time.};
	#script {logFilePath} {date +'log/%Y/%B/%d/'};
	#variable {logFilePath} {${HOME}/${logFilePath[1]}};
	#script {logFileName} {date +'%I_%M%p.log'};
	#system {mkdir -p $logFilePath};
	#log {overwrite} {${logFilePath}${logFileName[1]}}
}

#VARIABLE         {connected}  {false}
#VARIABLE         {enteredPassword}  {false}
#VARIABLE         {motd}  {}
